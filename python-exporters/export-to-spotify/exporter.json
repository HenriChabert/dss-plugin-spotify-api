/* This file is the descriptor for the Custom python exporter export-to-spotify */
{
    "meta" : {
        // label: name of the exporter as displayed, should be short
        "label": "Custom exporter export-to-spotify",

        // description: longer string to help end users understand what this exporter is
        "description": "",

        // icon: must be one of the FontAwesome 3.2.1 icons, complete list here at https://fontawesome.com/v3.2.1/icons/
        "icon": "icon-puzzle-piece"
    },

    /* if the exporter produces a file, use OUTPUT_TO_FILE. If the exporter manages the output completely, use MANAGES_OUTPUT. */
    "exportBehavior": "OUTPUT_TO_FILE",

    /* when the exportBehavior is OUTPUT_TO_FILE, DSS will send the product of the export to the browser, and
       needs to adjust the mime type */
    "mime" : {
        /* the mime-type sent to the browser */
        "mimeType": "text/plain",
        /* DSS creates file names by concatenating a unique identifier and this extension */
        "extension": ".csv"
    },

    /* to get the exporter to appear as an option of 'prepare for download' in the export dialog, add options here */
    "exportOptions": [
        /* {
            "id": "option1",
            "label": "export using this plugin",
            "predefinedConfig" : { "parameter1": "d" },
            "compression": "NONE"
        } */
    ],

    /* if DSS should compress the export itself. Setting this parameter overrides the mime type definition
    "compression": "FILE_OR_STREAM_TO_GZIP" or "DIR_TO_ZIP",
    */

    /* params:
    DSS will generate a formular from this list of requested parameters.
    Your component code can then access the value provided by users using the "name" field of each parameter.

    Available parameter types include:
    STRING, INT, DOUBLE, BOOLEAN, DATE, SELECT, TEXTAREA, PRESET and others.

    For the full list and for more details, see the documentation: https://doc.dataiku.com/dss/latest/plugins/reference/params.html
    */
    "params": [
        {
            "name": "parameter1",
            "label": "User-readable name",
            "type": "STRING",
            "description": "Some documentation for parameter1",
            "mandatory": true
        },
        {
            "name": "parameter2",
            "type": "INT",
            "defaultValue" : 42
            /* Note that standard json parsing will return it as a double in Python (instead of an int), so you need to write
               int(self.config()['parameter2'])
            */
        },

        /* A "SELECT" parameter is a multi-choice selector. Choices are specified using the selectChoice field*/
        {
            "name": "parameter8",
            "type": "SELECT",
            "selectChoices": [
                {
                    "value": "val_x",
                    "label": "display name for val_x"
                },
                {
                    "value": "val_y",
                    "label": "display name for val_y"
                }
            ]
        }
    ]
}
